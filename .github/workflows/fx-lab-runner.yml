
name: FusionX-Lab-Runner
 
on:
  pull_request:
  workflow_dispatch:
    inputs:
      KERNEL_TREE:
        description: 'Kernel Tree'
        default: 'https://github.com/SenXLab/fusionX_lab_sm8250'
        required: true
      VERSION:
        description: 'Zip Version'
        default: 'PRIVATE'
        required: false
      ANYKERNEL_URL:
        description: 'AnyKernel Url'
        default: 'https://github.com/SenseiiX/AnyKernel3'
        required: false
      ANYKERNEL_BRANCH:
        description: 'AnyKernel Branch'
        default: 'fusionX'
        required: true
      CUSTOM_SED:
        description: 'Custom Kernel Version'
        default: '-FusionX'
        required: false
      USE_LTO_THIN:
        description: 'Use LTO Thin instead of LTO Full'
        required: false
        type: boolean
        default: false
      CLANG_TOOLCHAIN:
        description: 'Choose which Clang toolchain to use'
        required: false
        type: choice
        options:
          - neutron clang
          - aosp clang
        default: 'neutron clang'
 
jobs:
  build_kernel:
    strategy:
      matrix:
        type: [original, los, modified, swift]
    runs-on: ubuntu-latest
    env:
      UPLOAD_TO_RELEASE: false
      KERNEL_VARIANT: NEXT

    steps:
      - name: Install Dependencies
        run: |
          sudo apt install flex libncurses6
          # Install zstd if using neutron clang
          if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "neutron clang" ]]; then
            sudo apt install zstd
          fi

      - name: Cache Clang toolchain
        uses: actions/cache@v3
        id: cache-clang
        with:
          path: ${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'clang-aosp' || 'clang-neutron' }}
          key: ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'r547379' || '10032024-v1' }}
          restore-keys: |
            ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-
            ${{ github.event.inputs.CLANG_TOOLCHAIN }}-

      - name: Download & Extract Clang (If not cached)
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
            mkdir -p clang-aosp
            tar -xf clang.tar.gz -C clang-aosp
          else
            wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
            mkdir -p clang-neutron
            unzstd -d clang.tar.zst
            tar -xf clang.tar -C clang-neutron
          fi
          
      - name: Checkout Kernel
        uses: actions/checkout@v4
        with:
          repository: SenXLab/fusionX_lab_sm8250
          ref: base
          path: kernel_tree
          fetch-depth: 1

      - name: Kernel Version
        run: |
          cd kernel_tree
          if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-FusionX" ]]; then
            sed -i -e 's/CONFIG_LOCALVERSION="-FusionX"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/munch_defconfig
          fi
          
      - name: Change LTO Configuration to THIN
        if: ${{ github.event.inputs.USE_LTO_THIN == 'true' }}
        run: |
          cd kernel_tree
          echo "Changing LTO configuration from FULL to THIN..."
          sed -i -e'
          /CONFIG_ARCH_SUPPORTS_LTO_CLANG=y/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG=y
          /# CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN is not set/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
          /CONFIG_HAS_LTO_CLANG=y/c\CONFIG_HAS_LTO_CLANG=y
          /# CONFIG_LTO_NONE is not set/c\# CONFIG_LTO_NONE is not set
          /CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set
          /CONFIG_LTO_CLANG_THIN=n/c\CONFIG_LTO_CLANG_THIN=y
          ' arch/arm64/configs/vendor/munch_defconfig
          
      - name: Apply Patches
        run: |
          cd kernel_tree
          bash nextpatch.sh
          
          # Apply LOS-IR patch only for the 'los' build type
          if [[ "${{ matrix.type }}" == "los" ]]; then
            echo "Applying LOS-IR patch for the LOS build..."
            patch -p1 -f < "0001-LOS-IR.patch"
          fi

      - name: Apply Modifications (if swift build)
        if: matrix.type == 'swift'
        run: |
          cd kernel_tree
          sed -i -e '/<2841600>,/c\<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<3187200>;/d' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          
      - name: Apply Modifications (if modified build)
        if: matrix.type == 'modified'
        run: |
          cd kernel_tree
          sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi 
          sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
      
      - name: Record build start time
        id: build_start
        run: |
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "start_date=$(TZ=Asia/Manila date +'%b %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
      
      - name: Build Kernel
        run: |
          if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
            export PATH="$(pwd)/clang-aosp/bin:$PATH"
          else
            export PATH="$(pwd)/clang-neutron/bin:$PATH"
          fi
          export ARCH=arm64
          export SUBARCH=ARM64
          export KBUILD_BUILD_USER="Senseix"
          export KBUILD_BUILD_HOST="Ubuntu"
          cd kernel_tree
          make O=out vendor/munch_defconfig
          make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
          
          if [[ "${{ matrix.type }}" == "original" ]]; then
            mv out/arch/arm64/boot/dtbo.img ../munch-aosp-dtbo.img
            mv out/arch/arm64/boot/dtb ../munch-normal-dtb
            cp out/arch/arm64/boot/Image.gz ../Image.gz
          elif [[ "${{ matrix.type }}" == "los" ]]; then
            mv out/arch/arm64/boot/dtbo.img ../munch-aosp-ir-dtbo.img
          elif [[ "${{ matrix.type }}" == "swift" ]]; then
            mv out/arch/arm64/boot/dtb ../munch-slight-uc-dtb
          else
            mv out/arch/arm64/boot/dtbo.img ../munch-miui-dtbo.img
            mv out/arch/arm64/boot/dtb ../munch-effcpu-dtb
          fi

      - name: Verify build artifacts
        run: |
          if [[ "${{ matrix.type }}" == "original" ]]; then
            ls -la munch-aosp-dtbo.img munch-normal-dtb Image.gz
            if [[ ! -s munch-aosp-dtbo.img || ! -s munch-normal-dtb || ! -s Image.gz ]]; then
              echo "Error: One or more original build artifacts is missing or empty"
              exit 1
            fi
          elif [[ "${{ matrix.type }}" == "los" ]]; then
            ls -la munch-aosp-ir-dtbo.img
            if [[ ! -s munch-aosp-ir-dtbo.img ]]; then
              echo "Error: LOS DTBO is missing or empty"
              exit 1
            fi
          elif [[ "${{ matrix.type }}" == "swift" ]]; then
            ls -la munch-slight-uc-dtb
            if [[ ! -s munch-slight-uc-dtb ]]; then
              echo "Error: Swift DTB is missing or empty"
              exit 1
            fi
          else
            ls -la munch-miui-dtbo.img munch-effcpu-dtb
            if [[ ! -s munch-miui-dtbo.img || ! -s munch-effcpu-dtb ]]; then
              echo "Error: One or more modified build artifacts is missing or empty"
              exit 1
            fi
          fi
          
      - name: Record build end time
        id: build_end
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.build_start.outputs.start_time }}
          build_duration=$((end_time - start_time))
          echo "end_time=$end_time" >> $GITHUB_OUTPUT
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT
      
      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.type }}
          path: |
            munch-aosp-dtbo.img
            munch-aosp-ir-dtbo.img
            munch-miui-dtbo.img
            munch-normal-dtb
            munch-effcpu-dtb
            munch-slight-uc-dtb
            Image.gz
            
      - name: Save build metrics
        if: matrix.type == 'original'
        run: |
          mkdir -p /tmp/build-metrics
          echo "${{ steps.build_start.outputs.start_date }}" > /tmp/build-metrics/start-date
          echo "${{ steps.build_end.outputs.build_duration }}" > /tmp/build-metrics/duration
          
          if [[ "${{ github.event.inputs.USE_LTO_THIN }}" == "true" ]]; then
            echo "LTO: THIN" > /tmp/build-metrics/lto-config
          else
            echo "LTO: FULL" > /tmp/build-metrics/lto-config
          fi
          # Save Clang toolchain information
          echo "CLANG: ${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> /tmp/build-metrics/lto-config
      
      - name: Upload build metrics
        if: matrix.type == 'original'
        uses: actions/upload-artifact@v4
        with:
          name: build-metrics
          path: /tmp/build-metrics/

  package_kernel:
    needs: build_kernel
    runs-on: ubuntu-latest

    steps:
      - name: Download Kernel Build Original
        uses: actions/download-artifact@v4
        with:
          name: kernel-original
          path: kernel-original

      - name: Download Kernel Build LOS
        uses: actions/download-artifact@v4
        with:
          name: kernel-los
          path: kernel-los

      - name: Download Kernel Build Modified
        uses: actions/download-artifact@v4
        with:
          name: kernel-modified
          path: kernel-modified

      - name: Download Kernel Build Swift
        uses: actions/download-artifact@v4
        with:
          name: kernel-swift
          path: kernel-swift
          
      - name: Download build metrics
        uses: actions/download-artifact@v4
        with:
          name: build-metrics
          path: build-metrics

      - name: Clone AnyKernel3
        run: git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b ${{ github.event.inputs.ANYKERNEL_BRANCH }} AnyKernel3

      - name: Move Kernel Files to AnyKernel3 and List them
        run: |
          # Move the files from each build directory to AnyKernel3
          cp -v kernel-original/* AnyKernel3/ || true
          cp -v kernel-los/* AnyKernel3/ || true
          cp -v kernel-modified/* AnyKernel3/ || true
          cp -v kernel-swift/* AnyKernel3/ || true
          
          # List all files in AnyKernel3 to verify
          echo "Contents of AnyKernel3 directory:"
          ls -la AnyKernel3/
          
          # Specifically check for DTBO files
          echo "DTBO files in AnyKernel3:"
          ls -la AnyKernel3/*dtbo.img || echo "No DTBO files found!"
         
      - name: Define ZIP Name
        run: |
          # Use Philippine timezone (UTC+8) for date
          COMPILED_DATE=$(TZ=Asia/Manila date +%m%d)
          LTO_CONFIG=$(cat build-metrics/lto-config | head -n 1 | cut -d' ' -f2)
          CLANG_TOOLCHAIN=$(cat build-metrics/lto-config | tail -n 1 | cut -d' ' -f2)
          
          BASE_NAME="FusionX-NEXT"
          BUILD_TYPE="Personal Build"

          ZIP_NAME="[${BASE_NAME}]-${{ github.event.inputs.VERSION }}-${COMPILED_DATE}"
          KERNEL_NAME="${BASE_NAME}"
          
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
          echo "LTO_CONFIG=$LTO_CONFIG" >> $GITHUB_ENV
          echo "CLANG_TOOLCHAIN=$CLANG_TOOLCHAIN" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          
      - name: Package Kernel
        run: |
          cd AnyKernel3
          # List files before zipping
          echo "Files to be included in zip:"
          ls -la
          
          zip -r9 ../${{ env.ZIP_NAME }}.zip *

      - name: Read build metrics
        id: read_metrics
        run: |
          start_date=$(cat build-metrics/start-date)
          duration=$(cat build-metrics/duration)
          echo "start_date=$start_date" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          
          # Convert seconds to minutes and seconds format
          minutes=$((duration / 60))
          seconds=$((duration % 60))
          echo "build_time=${minutes}m ${seconds}s" >> $GITHUB_OUTPUT
      
      - name: Install Python dependencies
        run: pip install requests python-telegram-bot
      
      - name: Send Telegram message
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          START_DATE: ${{ steps.read_metrics.outputs.start_date }}
          BUILD_TIME: ${{ steps.read_metrics.outputs.build_time }}
        run: |
          cat > send_telegram.py << 'EOF'
          import os
          import requests
          
          def send_telegram_message(bot_token, chat_id, message, file_path):
              url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
              
              message_html = message
              
              files = {
                  'document': open(file_path, 'rb')
              }
              
              data = {
                  'chat_id': chat_id,
                  'caption': message_html,
                  'parse_mode': 'HTML'
              }
              
              response = requests.post(url, data=data, files=files)
              return response.json()
          
          # Get environment variables
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          kernel_name = os.environ.get('KERNEL_NAME')
          start_date = os.environ.get('START_DATE')
          build_time = os.environ.get('BUILD_TIME')
          lto_config = os.environ.get('LTO_CONFIG')
          clang_toolchain = os.environ.get('CLANG_TOOLCHAIN')
          build_type = os.environ.get('BUILD_TYPE')
          zip_name = os.environ.get('ZIP_NAME')
          
          message = f"""<b>✅ {kernel_name} Build Complete!</b> 
          <b>🔲 Yml:</b> FusionX-Build
          <b>📅 Date:</b> {start_date}
          <b>🕔 Build Duration:</b> {build_time}
          <b>📱 Device Codename:</b> munch
          <b>📑 Branch:</b> base
          <b>🔧 Lto:</b> {lto_config}
          <b>⚙️ Toolchain:</b> {clang_toolchain}
          <b>📂 Build Type:</b> {build_type}"""
          
          # Send the message with file
          result = send_telegram_message(bot_token, chat_id, message, f"{zip_name}.zip")
          print(result)
          
          # Check if message was sent successfully
          if not result.get('ok'):
              print(f"Error sending Telegram message: {result}")
              exit(1)
          EOF
          
          python send_telegram.py
      
      - name: Upload Flashable Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}.zip
